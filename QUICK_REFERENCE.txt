╔══════════════════════════════════════════════════════════════════════════════╗
║                    MoEFsDiC 快速参考卡片                                    ║
╚══════════════════════════════════════════════════════════════════════════════╝

📦 项目结构
├── src/
│   ├── modules/        # 核心模块 (专家、频率域、卷积块)
│   ├── models/         # U-Net 主模型
│   └── utils/          # 损失函数等工具
├── configs/            # 6 种实验配置
├── train.py            # 训练脚本
└── docs/               # 完整文档

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🚀 快速开始

1. 安装依赖
   $ pip install -r requirements.txt

2. 训练模型
   $ python train.py --config configs/default.yaml --device cuda

3. 查看帮助
   $ python train.py --help

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🔬 消融实验配置

┌─────────────────┬──────┬───────┬─────────┬────────────────┐
│ 配置文件        │ MoE  │ Freq  │ DS-Conv │ 说明           │
├─────────────────┼──────┼───────┼─────────┼────────────────┤
│ default.yaml    │  ✓   │   ✓   │    ✓    │ 完整模型       │
│ no_moe.yaml     │  ✗   │   ✓   │    ✓    │ 禁用 MoE       │
│ no_freq.yaml    │  ✓   │   ✗   │    ✓    │ 禁用频率域     │
│ no_dsconv.yaml  │  ✓   │   ✓   │    ✗    │ 禁用 DS-Conv   │
│ minimal.yaml    │  ✗   │   ✗   │    ✗    │ 最小基线       │
│ large_moe.yaml  │  ✓✓  │   ✓   │    ✓    │ 16专家/Top-4   │
└─────────────────┴──────┴───────┴─────────┴────────────────┘

使用示例:
$ python train.py --config configs/no_moe.yaml

批量运行:
$ bash run_ablations.sh cuda 100

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🏗️ 核心组件

1. DepthwiseSeparableConv2d
   • Depthwise + Pointwise 卷积
   • 参数量减少 ~9 倍

2. Expert
   • 残差块结构
   • DS-Conv + GELU + BatchNorm

3. Router
   • 融合：空间特征 + 时间 + 条件
   • 输出：专家 Logits

4. MoE_ConvBlock
   • Top-K 稀疏激活
   • 专家混合输出

5. Freq_Global_Module
   • FFT/IFFT 全局感知
   • 频率域调制

6. MoEFsDiC_UNet
   • 编码器-瓶颈-解码器
   • 跳跃连接

7. MoELoss
   • L = L_DM + λ × L_Load
   • 扩散损失 + 负载均衡

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

⚙️ 关键配置参数

模型:
  model_channels: 128         # 基础通道数
  channel_mults: [1,2,4,8]    # 通道倍数

MoE:
  num_experts: 8              # 专家数量
  k_active: 2                 # Top-K 激活

训练:
  lambda_load: 0.01           # 负载均衡权重
  learning_rate: 1e-4         # 学习率
  batch_size: 16              # 批次大小

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📊 项目统计

• 源代码: 1032 行 Python
• 配置: 6 种消融实验
• 文档: 4 份详细说明
• 总文件: 22 个
• 项目大小: ~440 KB

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📚 文档

• README.md          - 项目概述
• QUICKSTART.md      - 快速入门
• ARCHITECTURE.md    - 架构详解
• PROJECT_SUMMARY.md - 项目总结

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🐛 常见问题

Q: 显存不足?
A: 减少 batch_size 或 model_channels

Q: 训练慢?
A: 启用 use_dsconv_global=true

Q: 负载不均?
A: 增加 lambda_load 权重

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

✅ 项目状态: 完成并可用
📅 最后更新: 2025-10-05


